import base64
import time
import discord
import aiohttp
import json
import base64
from craiyon import Craiyon
from io import BytesIO
from discord import app_commands
from discord.ext import commands


# class Dropdown(discord.ui.Select):
#     def __init__(self, message, images, user):
#         self.message = message
#         self.images = images
#         self.user = user
#
#         options = [
#             discord.SelectOption(label="1"),
#             discord.SelectOption(label="2"),
#             discord.SelectOption(label="3"),
#             discord.SelectOption(label="4"),
#             discord.SelectOption(label="5"),
#             discord.SelectOption(label="6"),
#             discord.SelectOption(label="7"),
#             discord.SelectOption(label="8"),
#             discord.SelectOption(label="9"),
#         ]
#
#         super().__init__()
#         placeholder = "Choose the image you want to see!"
#         min_values = 1
#         max_values = 1
#         options = options
#
#     async def callback(self, interaction: discord.Interaction):
#         selection = int(self.values[0]) - 1
#         image = BytesIO(base64.decodebytes(self.images[selection].encode("utf-8")))
#         return await interaction.followup.send(file=discord.File(fp=image), filename="art.png"),


class Image(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("Image commands loaded ‚úîÔ∏è")

    # Generates random cat images/gifs from API
    @app_commands.command(name="cat", description="Generates a random cat image/gif")
    @app_commands.checks.cooldown(1, 5, key=lambda i: i.user.id)
    async def cat(self, interaction: discord.Interaction):
        """random cat image/gif"""
        await interaction.response.defer()
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.thecatapi.com/v1/images/search') as response:
                raw = await response.text()
                cat = json.loads(raw)[0]
                embed = discord.Embed(title="meow! üò∫", color=discord.Colour.purple())
                embed.set_image(url=cat['url'])
                await interaction.followup.send(embed=embed)

    # Generates random dog images/gifs from API
    @app_commands.command(name="dog", description="Generates a random dog image/gif")
    @app_commands.checks.cooldown(1, 5, key=lambda i: i.user.id)
    async def dog(self, interaction: discord.Interaction):
        """random dog image/gif"""
        await interaction.response.defer()
        async with aiohttp.ClientSession() as session:
            async with session.get('https://dog.ceo/api/breeds/image/random') as response:
                raw = await response.text()
                dog = json.loads(raw)
                embed = discord.Embed(title="woof! üê∂", color=discord.Colour.green())
                embed.set_image(url=dog['message'])
                await interaction.followup.send(embed=embed)

    # Generate a random prompt based image using AI
    @app_commands.command(name="imagine", description="Generates a random image based on your prompt using AI")
    @app_commands.checks.cooldown(1, 5, key=lambda i: i.user.id)
    async def imagine(self, interaction: discord.Interaction, prompt: str):
        """random AI image"""
        await interaction.response.defer()
        eta = int(time.time() + 60)
        await interaction.followup.send(f"This will take a minute... ETA: <t:{eta}:R>")
        generator = Craiyon()
        result = generator.generate(prompt)
        images = result.images
        for i in images:
            image = BytesIO(base64.decodebytes(i.encode("utf-8")))
            await interaction.followup.send(content="Content generated by ***craiyon.com***",
                                            file=discord.File(image, "generatedImage.png"))

    # # todo - fix cooldown error message
    # @commands.Cog.listener()
    # async def on_command_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
    #     if isinstance(error, commands.CommandOnCooldown):
    #         await interaction.response.send_message(f"Slow down there {interaction.user.mention}!"
    #                                                 f"\n wait for {error.retry_after} seconds!", ephemeral=True)
    #     else:
    #         raise error


async def setup(bot):
    await bot.add_cog(Image(bot))
